/* eslint-disable */
import * as types from './graphql.js';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query GetAccount($publicKey: PublicKey!) {\n      account(publicKey: $publicKey) {\n        actionState\n        index\n        inferredNonce\n        leafHash\n        locked\n        provedState\n        publicKey\n        receiptChainHash\n        stakingActive\n        tokenId\n        tokenSymbol\n        verificationKey {\n          hash\n          verificationKey\n        }\n        votingFor\n        zkappState\n        zkappUri\n        nonce\n        balance {\n          blockHeight\n          liquid\n          locked\n          total\n          stateHash\n        }\n        timing {\n          cliffAmount\n          cliffTime\n          initialMinimumBalance\n          vestingIncrement\n          vestingPeriod\n        }\n        delegateAccount {\n          publicKey\n        }\n        delegators {\n          publicKey\n        }\n        epochDelegateAccount {\n          publicKey\n        }\n      }\n    }\n  ": types.GetAccountDocument,
    "\n  query GetMerklePath($publicKey: PublicKey!) {\n    account(publicKey: $publicKey) {\n      merklePath {\n        left\n        right\n      }\n    }\n  }\n": types.GetMerklePathDocument,
    "\n  query GetPermissions($publicKey: PublicKey!) {\n    account(publicKey: $publicKey) {\n      permissions {\n        access\n        editActionState\n        editState\n        incrementNonce\n        receive\n        send\n        setDelegate\n        setPermissions\n        setTiming\n        setTokenSymbol\n        setVerificationKey {\n          auth\n          txnVersion\n        }\n        setVotingFor\n        setZkappUri\n      }\n    }\n  }\n": types.GetPermissionsDocument,
    "\n    query GetRecentPayments($maxLength: Int!) {\n      bestChain(maxLength: $maxLength) {\n        transactions {\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n        stateHash\n        protocolState {\n          consensusState {\n            blockHeight\n            epoch\n            slot\n          }\n        }\n      }\n    }\n  ": types.GetRecentPaymentsDocument,
    "\n    query GetRecentZkAppCommands($maxLength: Int!) {\n      bestChain(maxLength: $maxLength) {\n        transactions {\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n        stateHash\n        protocolState {\n          consensusState {\n            blockHeight\n            epoch\n            slot\n          }\n        }\n      }\n    }\n  ": types.GetRecentZkAppCommandsDocument,
    "\n    query GetBlockByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  ": types.GetBlockByHeightDocument,
    "\n    query GetUserCommandsByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n      }\n    }\n  ": types.GetUserCommandsByHeightDocument,
    "\n    query GetZkAppCommandsByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  ": types.GetZkAppCommandsByHeightDocument,
    "\n    query GetSnarkJobsByHeight($height: Int!) {\n      block(height: $height) {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n        }\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n      }\n    }\n  ": types.GetSnarkJobsByHeightDocument,
    "\n    query GetBlockByHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  ": types.GetBlockByHashDocument,
    "\n    query GetUserCommandsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n      }\n    }\n  ": types.GetUserCommandsByBlockHashDocument,
    "\n    query GetZkAppCommandsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  ": types.GetZkAppCommandsByBlockHashDocument,
    "\n    query GetSnarkJobsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n        }\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n      }\n    }\n  ": types.GetSnarkJobsByBlockHashDocument,
    "\n  query GetGenesisBlock {\n    genesisBlock {\n      creatorAccount {\n        publicKey\n      }\n      protocolState {\n        blockchainState {\n          bodyReference\n          utcDate\n          snarkedLedgerHash\n          stagedLedgerHash\n        }\n        consensusState {\n          blockCreator\n          blockHeight\n          blockStakeWinner\n          coinbaseReceiever\n          epoch\n          epochCount\n          slot\n        }\n        previousStateHash\n      }\n      snarkJobs {\n        fee\n        prover\n        workIds\n      }\n      transactions {\n        feeTransfer {\n          fee\n          recipient\n          type\n        }\n        userCommands {\n          ... on UserCommandPayment {\n            id\n            amount\n            failureReason\n            fee\n            feeToken\n            hash\n            kind\n            memo\n            receiver {\n              publicKey\n              nonce\n            }\n            source {\n              publicKey\n              nonce\n            }\n            token\n            validUntil\n          }\n        }\n        zkappCommands {\n          hash\n          id\n          zkappCommand {\n            memo\n            accountUpdates {\n              body {\n                actions\n                authorizationKind {\n                  isProved\n                  isSigned\n                  verificationKeyHash\n                }\n                balanceChange {\n                  magnitude\n                  sgn\n                }\n                callData\n                callDepth\n                events\n                implicitAccountCreationFee\n                incrementNonce\n                mayUseToken {\n                  inheritFromParent\n                  parentsOwnToken\n                }\n                publicKey\n                tokenId\n                useFullCommitment\n                preconditions {\n                  account {\n                    actionState\n                    balance {\n                      lower\n                      upper\n                    }\n                    nonce {\n                      lower\n                      upper\n                    }\n                    isNew\n                    delegate\n                    provedState\n                    state\n                    receiptChainHash\n                  }\n                  network {\n                    blockchainLength {\n                      lower\n                      upper\n                    }\n                    globalSlotSinceGenesis {\n                      lower\n                      upper\n                    }\n                    minWindowDensity {\n                      lower\n                      upper\n                    }\n                    nextEpochData {\n                      epochLength {\n                        lower\n                        upper\n                      }\n                      ledger {\n                        hash\n                        totalCurrency {\n                          lower\n                          upper\n                        }\n                      }\n                      lockCheckpoint\n                      seed\n                      startCheckpoint\n                    }\n                    snarkedLedgerHash\n                    stakingEpochData {\n                      epochLength {\n                        lower\n                        upper\n                      }\n                      lockCheckpoint\n                      ledger {\n                        hash\n                        totalCurrency {\n                          lower\n                          upper\n                        }\n                      }\n                      seed\n                      startCheckpoint\n                    }\n                    totalCurrency {\n                      lower\n                      upper\n                    }\n                  }\n                  validWhile {\n                    upper\n                    lower\n                  }\n                }\n                update {\n                  appState\n                  delegate\n                  permissions {\n                    access\n                    editActionState\n                    editState\n                    incrementNonce\n                    receive\n                    send\n                    setDelegate\n                    setPermissions\n                    setTiming\n                    setTokenSymbol\n                    setVerificationKey {\n                      auth\n                      txnVersion\n                    }\n                    setVotingFor\n                    setZkappUri\n                  }\n                  timing {\n                    cliffAmount\n                    cliffTime\n                    initialMinimumBalance\n                    vestingIncrement\n                    vestingPeriod\n                  }\n                  zkappUri\n                  votingFor\n                  verificationKey {\n                    data\n                    hash\n                  }\n                  tokenSymbol\n                }\n              }\n            }\n            feePayer {\n              authorization\n              body {\n                fee\n                validUntil\n                publicKey\n                nonce\n              }\n            }\n          }\n          failureReason {\n            failures\n            index\n          }\n        }\n      }\n    }\n  }\n": types.GetGenesisBlockDocument,
    "\n    query GetPooledUserCommands {\n      pooledUserCommands {\n        fee\n        id\n        hash\n        memo\n        kind\n        receiver {\n          publicKey\n          nonce\n        }\n        source {\n          nonce\n          publicKey\n        }\n        validUntil\n        ... on UserCommandPayment {\n          id\n          amount\n          failureReason\n          fee\n          feeToken\n          hash\n          kind\n          memo\n          receiver {\n            publicKey\n            nonce\n          }\n          source {\n            publicKey\n            nonce\n          }\n          token\n          validUntil\n        }\n      }\n    }\n  ": types.GetPooledUserCommandsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetAccount($publicKey: PublicKey!) {\n      account(publicKey: $publicKey) {\n        actionState\n        index\n        inferredNonce\n        leafHash\n        locked\n        provedState\n        publicKey\n        receiptChainHash\n        stakingActive\n        tokenId\n        tokenSymbol\n        verificationKey {\n          hash\n          verificationKey\n        }\n        votingFor\n        zkappState\n        zkappUri\n        nonce\n        balance {\n          blockHeight\n          liquid\n          locked\n          total\n          stateHash\n        }\n        timing {\n          cliffAmount\n          cliffTime\n          initialMinimumBalance\n          vestingIncrement\n          vestingPeriod\n        }\n        delegateAccount {\n          publicKey\n        }\n        delegators {\n          publicKey\n        }\n        epochDelegateAccount {\n          publicKey\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetAccount($publicKey: PublicKey!) {\n      account(publicKey: $publicKey) {\n        actionState\n        index\n        inferredNonce\n        leafHash\n        locked\n        provedState\n        publicKey\n        receiptChainHash\n        stakingActive\n        tokenId\n        tokenSymbol\n        verificationKey {\n          hash\n          verificationKey\n        }\n        votingFor\n        zkappState\n        zkappUri\n        nonce\n        balance {\n          blockHeight\n          liquid\n          locked\n          total\n          stateHash\n        }\n        timing {\n          cliffAmount\n          cliffTime\n          initialMinimumBalance\n          vestingIncrement\n          vestingPeriod\n        }\n        delegateAccount {\n          publicKey\n        }\n        delegators {\n          publicKey\n        }\n        epochDelegateAccount {\n          publicKey\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMerklePath($publicKey: PublicKey!) {\n    account(publicKey: $publicKey) {\n      merklePath {\n        left\n        right\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMerklePath($publicKey: PublicKey!) {\n    account(publicKey: $publicKey) {\n      merklePath {\n        left\n        right\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPermissions($publicKey: PublicKey!) {\n    account(publicKey: $publicKey) {\n      permissions {\n        access\n        editActionState\n        editState\n        incrementNonce\n        receive\n        send\n        setDelegate\n        setPermissions\n        setTiming\n        setTokenSymbol\n        setVerificationKey {\n          auth\n          txnVersion\n        }\n        setVotingFor\n        setZkappUri\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPermissions($publicKey: PublicKey!) {\n    account(publicKey: $publicKey) {\n      permissions {\n        access\n        editActionState\n        editState\n        incrementNonce\n        receive\n        send\n        setDelegate\n        setPermissions\n        setTiming\n        setTokenSymbol\n        setVerificationKey {\n          auth\n          txnVersion\n        }\n        setVotingFor\n        setZkappUri\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetRecentPayments($maxLength: Int!) {\n      bestChain(maxLength: $maxLength) {\n        transactions {\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n        stateHash\n        protocolState {\n          consensusState {\n            blockHeight\n            epoch\n            slot\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetRecentPayments($maxLength: Int!) {\n      bestChain(maxLength: $maxLength) {\n        transactions {\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n        stateHash\n        protocolState {\n          consensusState {\n            blockHeight\n            epoch\n            slot\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetRecentZkAppCommands($maxLength: Int!) {\n      bestChain(maxLength: $maxLength) {\n        transactions {\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n        stateHash\n        protocolState {\n          consensusState {\n            blockHeight\n            epoch\n            slot\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetRecentZkAppCommands($maxLength: Int!) {\n      bestChain(maxLength: $maxLength) {\n        transactions {\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n        stateHash\n        protocolState {\n          consensusState {\n            blockHeight\n            epoch\n            slot\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBlockByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetBlockByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserCommandsByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetUserCommandsByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetZkAppCommandsByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetZkAppCommandsByHeight($height: Int!) {\n      block(height: $height) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetSnarkJobsByHeight($height: Int!) {\n      block(height: $height) {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n        }\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetSnarkJobsByHeight($height: Int!) {\n      block(height: $height) {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n        }\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetBlockByHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetBlockByHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetUserCommandsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetUserCommandsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          userCommands {\n            ... on UserCommandPayment {\n              id\n              amount\n              failureReason\n              fee\n              feeToken\n              hash\n              kind\n              memo\n              receiver {\n                publicKey\n                nonce\n              }\n              source {\n                publicKey\n                nonce\n              }\n              token\n              validUntil\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetZkAppCommandsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetZkAppCommandsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n          zkappCommands {\n            hash\n            id\n            zkappCommand {\n              memo\n              accountUpdates {\n                body {\n                  actions\n                  authorizationKind {\n                    isProved\n                    isSigned\n                    verificationKeyHash\n                  }\n                  balanceChange {\n                    magnitude\n                    sgn\n                  }\n                  callData\n                  callDepth\n                  events\n                  implicitAccountCreationFee\n                  incrementNonce\n                  mayUseToken {\n                    inheritFromParent\n                    parentsOwnToken\n                  }\n                  publicKey\n                  tokenId\n                  useFullCommitment\n                  preconditions {\n                    account {\n                      actionState\n                      balance {\n                        lower\n                        upper\n                      }\n                      nonce {\n                        lower\n                        upper\n                      }\n                      isNew\n                      delegate\n                      provedState\n                      state\n                      receiptChainHash\n                    }\n                    network {\n                      blockchainLength {\n                        lower\n                        upper\n                      }\n                      globalSlotSinceGenesis {\n                        lower\n                        upper\n                      }\n                      minWindowDensity {\n                        lower\n                        upper\n                      }\n                      nextEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        lockCheckpoint\n                        seed\n                        startCheckpoint\n                      }\n                      snarkedLedgerHash\n                      stakingEpochData {\n                        epochLength {\n                          lower\n                          upper\n                        }\n                        lockCheckpoint\n                        ledger {\n                          hash\n                          totalCurrency {\n                            lower\n                            upper\n                          }\n                        }\n                        seed\n                        startCheckpoint\n                      }\n                      totalCurrency {\n                        lower\n                        upper\n                      }\n                    }\n                    validWhile {\n                      upper\n                      lower\n                    }\n                  }\n                  update {\n                    appState\n                    delegate\n                    permissions {\n                      access\n                      editActionState\n                      editState\n                      incrementNonce\n                      receive\n                      send\n                      setDelegate\n                      setPermissions\n                      setTiming\n                      setTokenSymbol\n                      setVerificationKey {\n                        auth\n                        txnVersion\n                      }\n                      setVotingFor\n                      setZkappUri\n                    }\n                    timing {\n                      cliffAmount\n                      cliffTime\n                      initialMinimumBalance\n                      vestingIncrement\n                      vestingPeriod\n                    }\n                    zkappUri\n                    votingFor\n                    verificationKey {\n                      data\n                      hash\n                    }\n                    tokenSymbol\n                  }\n                }\n              }\n              feePayer {\n                authorization\n                body {\n                  fee\n                  validUntil\n                  publicKey\n                  nonce\n                }\n              }\n            }\n            failureReason {\n              failures\n              index\n            }\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetSnarkJobsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n        }\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetSnarkJobsByBlockHash($stateHash: String!) {\n      block(stateHash: $stateHash) {\n        transactions {\n          feeTransfer {\n            fee\n            recipient\n            type\n          }\n        }\n        creatorAccount {\n          publicKey\n        }\n        protocolState {\n          blockchainState {\n            bodyReference\n            utcDate\n            snarkedLedgerHash\n            stagedLedgerHash\n          }\n          consensusState {\n            blockCreator\n            blockHeight\n            blockStakeWinner\n            coinbaseReceiever\n            epoch\n            epochCount\n            slot\n          }\n          previousStateHash\n        }\n        snarkJobs {\n          fee\n          prover\n          workIds\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetGenesisBlock {\n    genesisBlock {\n      creatorAccount {\n        publicKey\n      }\n      protocolState {\n        blockchainState {\n          bodyReference\n          utcDate\n          snarkedLedgerHash\n          stagedLedgerHash\n        }\n        consensusState {\n          blockCreator\n          blockHeight\n          blockStakeWinner\n          coinbaseReceiever\n          epoch\n          epochCount\n          slot\n        }\n        previousStateHash\n      }\n      snarkJobs {\n        fee\n        prover\n        workIds\n      }\n      transactions {\n        feeTransfer {\n          fee\n          recipient\n          type\n        }\n        userCommands {\n          ... on UserCommandPayment {\n            id\n            amount\n            failureReason\n            fee\n            feeToken\n            hash\n            kind\n            memo\n            receiver {\n              publicKey\n              nonce\n            }\n            source {\n              publicKey\n              nonce\n            }\n            token\n            validUntil\n          }\n        }\n        zkappCommands {\n          hash\n          id\n          zkappCommand {\n            memo\n            accountUpdates {\n              body {\n                actions\n                authorizationKind {\n                  isProved\n                  isSigned\n                  verificationKeyHash\n                }\n                balanceChange {\n                  magnitude\n                  sgn\n                }\n                callData\n                callDepth\n                events\n                implicitAccountCreationFee\n                incrementNonce\n                mayUseToken {\n                  inheritFromParent\n                  parentsOwnToken\n                }\n                publicKey\n                tokenId\n                useFullCommitment\n                preconditions {\n                  account {\n                    actionState\n                    balance {\n                      lower\n                      upper\n                    }\n                    nonce {\n                      lower\n                      upper\n                    }\n                    isNew\n                    delegate\n                    provedState\n                    state\n                    receiptChainHash\n                  }\n                  network {\n                    blockchainLength {\n                      lower\n                      upper\n                    }\n                    globalSlotSinceGenesis {\n                      lower\n                      upper\n                    }\n                    minWindowDensity {\n                      lower\n                      upper\n                    }\n                    nextEpochData {\n                      epochLength {\n                        lower\n                        upper\n                      }\n                      ledger {\n                        hash\n                        totalCurrency {\n                          lower\n                          upper\n                        }\n                      }\n                      lockCheckpoint\n                      seed\n                      startCheckpoint\n                    }\n                    snarkedLedgerHash\n                    stakingEpochData {\n                      epochLength {\n                        lower\n                        upper\n                      }\n                      lockCheckpoint\n                      ledger {\n                        hash\n                        totalCurrency {\n                          lower\n                          upper\n                        }\n                      }\n                      seed\n                      startCheckpoint\n                    }\n                    totalCurrency {\n                      lower\n                      upper\n                    }\n                  }\n                  validWhile {\n                    upper\n                    lower\n                  }\n                }\n                update {\n                  appState\n                  delegate\n                  permissions {\n                    access\n                    editActionState\n                    editState\n                    incrementNonce\n                    receive\n                    send\n                    setDelegate\n                    setPermissions\n                    setTiming\n                    setTokenSymbol\n                    setVerificationKey {\n                      auth\n                      txnVersion\n                    }\n                    setVotingFor\n                    setZkappUri\n                  }\n                  timing {\n                    cliffAmount\n                    cliffTime\n                    initialMinimumBalance\n                    vestingIncrement\n                    vestingPeriod\n                  }\n                  zkappUri\n                  votingFor\n                  verificationKey {\n                    data\n                    hash\n                  }\n                  tokenSymbol\n                }\n              }\n            }\n            feePayer {\n              authorization\n              body {\n                fee\n                validUntil\n                publicKey\n                nonce\n              }\n            }\n          }\n          failureReason {\n            failures\n            index\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetGenesisBlock {\n    genesisBlock {\n      creatorAccount {\n        publicKey\n      }\n      protocolState {\n        blockchainState {\n          bodyReference\n          utcDate\n          snarkedLedgerHash\n          stagedLedgerHash\n        }\n        consensusState {\n          blockCreator\n          blockHeight\n          blockStakeWinner\n          coinbaseReceiever\n          epoch\n          epochCount\n          slot\n        }\n        previousStateHash\n      }\n      snarkJobs {\n        fee\n        prover\n        workIds\n      }\n      transactions {\n        feeTransfer {\n          fee\n          recipient\n          type\n        }\n        userCommands {\n          ... on UserCommandPayment {\n            id\n            amount\n            failureReason\n            fee\n            feeToken\n            hash\n            kind\n            memo\n            receiver {\n              publicKey\n              nonce\n            }\n            source {\n              publicKey\n              nonce\n            }\n            token\n            validUntil\n          }\n        }\n        zkappCommands {\n          hash\n          id\n          zkappCommand {\n            memo\n            accountUpdates {\n              body {\n                actions\n                authorizationKind {\n                  isProved\n                  isSigned\n                  verificationKeyHash\n                }\n                balanceChange {\n                  magnitude\n                  sgn\n                }\n                callData\n                callDepth\n                events\n                implicitAccountCreationFee\n                incrementNonce\n                mayUseToken {\n                  inheritFromParent\n                  parentsOwnToken\n                }\n                publicKey\n                tokenId\n                useFullCommitment\n                preconditions {\n                  account {\n                    actionState\n                    balance {\n                      lower\n                      upper\n                    }\n                    nonce {\n                      lower\n                      upper\n                    }\n                    isNew\n                    delegate\n                    provedState\n                    state\n                    receiptChainHash\n                  }\n                  network {\n                    blockchainLength {\n                      lower\n                      upper\n                    }\n                    globalSlotSinceGenesis {\n                      lower\n                      upper\n                    }\n                    minWindowDensity {\n                      lower\n                      upper\n                    }\n                    nextEpochData {\n                      epochLength {\n                        lower\n                        upper\n                      }\n                      ledger {\n                        hash\n                        totalCurrency {\n                          lower\n                          upper\n                        }\n                      }\n                      lockCheckpoint\n                      seed\n                      startCheckpoint\n                    }\n                    snarkedLedgerHash\n                    stakingEpochData {\n                      epochLength {\n                        lower\n                        upper\n                      }\n                      lockCheckpoint\n                      ledger {\n                        hash\n                        totalCurrency {\n                          lower\n                          upper\n                        }\n                      }\n                      seed\n                      startCheckpoint\n                    }\n                    totalCurrency {\n                      lower\n                      upper\n                    }\n                  }\n                  validWhile {\n                    upper\n                    lower\n                  }\n                }\n                update {\n                  appState\n                  delegate\n                  permissions {\n                    access\n                    editActionState\n                    editState\n                    incrementNonce\n                    receive\n                    send\n                    setDelegate\n                    setPermissions\n                    setTiming\n                    setTokenSymbol\n                    setVerificationKey {\n                      auth\n                      txnVersion\n                    }\n                    setVotingFor\n                    setZkappUri\n                  }\n                  timing {\n                    cliffAmount\n                    cliffTime\n                    initialMinimumBalance\n                    vestingIncrement\n                    vestingPeriod\n                  }\n                  zkappUri\n                  votingFor\n                  verificationKey {\n                    data\n                    hash\n                  }\n                  tokenSymbol\n                }\n              }\n            }\n            feePayer {\n              authorization\n              body {\n                fee\n                validUntil\n                publicKey\n                nonce\n              }\n            }\n          }\n          failureReason {\n            failures\n            index\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPooledUserCommands {\n      pooledUserCommands {\n        fee\n        id\n        hash\n        memo\n        kind\n        receiver {\n          publicKey\n          nonce\n        }\n        source {\n          nonce\n          publicKey\n        }\n        validUntil\n        ... on UserCommandPayment {\n          id\n          amount\n          failureReason\n          fee\n          feeToken\n          hash\n          kind\n          memo\n          receiver {\n            publicKey\n            nonce\n          }\n          source {\n            publicKey\n            nonce\n          }\n          token\n          validUntil\n        }\n      }\n    }\n  "): (typeof documents)["\n    query GetPooledUserCommands {\n      pooledUserCommands {\n        fee\n        id\n        hash\n        memo\n        kind\n        receiver {\n          publicKey\n          nonce\n        }\n        source {\n          nonce\n          publicKey\n        }\n        validUntil\n        ... on UserCommandPayment {\n          id\n          amount\n          failureReason\n          fee\n          feeToken\n          hash\n          kind\n          memo\n          receiver {\n            publicKey\n            nonce\n          }\n          source {\n            publicKey\n            nonce\n          }\n          token\n          validUntil\n        }\n      }\n    }\n  "];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;